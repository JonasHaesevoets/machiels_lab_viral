---
title: "final_march2024_joint_analysis"
format: 
  html:
    code-fold: true
editor: visual
toc: true
execute:
  warning: false
  message: false
---

# 28-03 Lucia presentation

## 1) Load in data and packages and load in functions

```{r}
easypackages::libraries("DESeq2","Seurat","tidyverse", "SeuratWrappers", "ggExtra", "textTinyR", "patchwork", "pheatmap", "ggrepel", "tidyseurat", "ggpubr", "viridis", "writexl", "readxl")
obj.v5 <- read_rds("../../Documents/machiels_lab_viral/intermediate_data/seurat_obj_central.rds")
DefaultAssay(obj.v5) <- "RNA"
output_file_path <- "output/final_march2024_joint_analysis/"

# The palette with grey:
cbp1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
          "#F0E442", "#0072B2", "#D55E00", "#CC79A7")

# The palette with black:
cbp2 <- c("#000000", "#E69F00", "#56B4E9", "#009E73",
          "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

#### This function takes a Seurat object or data frame (`seurat_tbl`) as input, calculates counts based on various factors, converts certain columns to factors, filters out specific conditions, calculates proportions of samples in a cluster, and then calculates z-scores of frequencies per cluster. Finally, it returns a modified data frame with these calculated values.

```{r}
make_zscore_and_freq_data <- function(seurat_tbl) {
  # Calculate counts of observations based on various factors
  # Parameters:
  #   seurat_tbl: A Seurat object or data frame containing the data
  # Returns:
  #   A modified data frame with z-scores and frequencies calculated
  
  seurat_tbl |> 
    dplyr::count(day_mock, sample_type, condition, sample_tag_ms4a3_pos_gabbr2, harmony_cluster_8dims_rough, .drop = FALSE) |> 
    # Make columns factors
    mutate(
      day_mock = factor(day_mock, levels = c("Mock", "d8", "d60")),
      sample_type = factor(sample_type, levels = c("lung", "bal")),
      condition = as_factor(condition),
      sampletag_Ms4a3 = as_factor(sample_tag_ms4a3_pos_gabbr2),
      harmony_cluster_8dims_rough = as_factor(harmony_cluster_8dims_rough)
    ) |> 
    # Filter out specific conditions on Mock day
    filter(!(day_mock == "Mock" & (condition %in% c("PR8", "MuHV4", "PVM", "MAV1")))) |> 
    # Calculate proportions of samples in a given cluster
    group_by(day_mock, sample_type, condition, sample_tag_ms4a3_pos_gabbr2) |> 
    mutate(freq_cluster = n / sum(n)) |> 
    # Calculate z-score of frequencies per cluster
    group_by(harmony_cluster_8dims_rough) |> 
    mutate(cluster_frequency_zscore = (freq_cluster - mean(freq_cluster)) / sd(freq_cluster))
}

```

#### This function takes a data frame (`x`) containing the necessary columns for plotting and creates a heatmap using ggplot2. It maps `condition` to the x-axis, `harmony_cluster_8dims_rough` to the y-axis, and `cluster_frequency_zscore` to the fill color. The heatmap is then faceted based on `sample_tag_ms4a3_pos_gabbr2`, `sample_type`, and `day_mock`. Axis text on the x-axis is rotated by 45 degrees for better readability. Finally, the color gradient for the fill is set to blue (low values), white (mid values), and red (high values).

```{r}
frequency_heatmap <- function(x){ 
  x |>   ggplot(aes(condition,
                    harmony_cluster_8dims_rough,
                    fill=cluster_frequency_zscore)) +
  geom_tile()+ 
  #scale_fill_viridis()+theme_bw() +
  ggh4x::facet_nested_wrap(
    vars(sample_tag_ms4a3_pos_gabbr2,
         sample_type,
         day_mock),
    nrow = 1,
    drop = TRUE,
    scales = "free_x"#,
    #space="free"
    )+
    theme_bw()+
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
    scale_fill_gradient2( low = "blue", mid = "white", high = "red")}
```

## **2) Integrate macrophages of all datasets into a combined embedding (umap)**

### 2a) Show the K nearest neighbour clusters

```{r}
obj.v5 |> DimPlot(group.by = "harmony_cluster_8dims_rough", label=T)

```

### Show the embeddings of lung and bal cells from the different timepoints

```{r}
obj.v5  |> ggplot(aes(umapharmony8dims_1,umapharmony8dims_2, 
                      color=day_mock_sample_type_mockTissueIncluded))+
  geom_point(aes(color="cell"))+
  geom_density_2d(bins=20,linewidth=1)+
  scale_color_manual(values = cbp1)+ theme_bw()+
  ggtitle("local density of sample in umap embedding")
```

```{r}
#| fig-width: 18
#| fig-height: 10
obj.v5  |>
  ggplot(aes(umapharmony8dims_1,
             umapharmony8dims_2,
             color=day_mock_sample_type_mockTissueIncluded)) +
  geom_point(aes(color="cell")) +
  geom_density_2d(bins=20,linewidth=1) +
  scale_color_manual(values = cbp1 )+
  theme_bw() +
  ggtitle("local density of sample in umap embedding")+
  facet_wrap(~day_mock_sample_type_mockTissueIncluded)
```

```{r}
#| fig-width: 18
#| fig-height: 18
samples <- obj.v5$day_mock_sample_type_mockTissueIncluded |> unique()
umap_sampletype_mock_point_plotlist <- list()
for (sample in samples) {
  obj.v5_filtered_for_sample <- obj.v5 |> as_tibble( ) |> filter(day_mock_sample_type_mockTissueIncluded==sample)
  obj.v5_not_sample <- obj.v5 |> as_tibble( ) |> filter(day_mock_sample_type_mockTissueIncluded!=sample)
  
  umap_sampletype_mock_point_plotlist[[sample]] <- obj.v5 |> 
    ggplot() +
    geom_point(data= obj.v5_not_sample,aes(umapharmony8dims_1,umapharmony8dims_2),color="grey")+
    geom_point(data= obj.v5_filtered_for_sample,aes(umapharmony8dims_1,umapharmony8dims_2),
               color="red",
               alpha=0.4,
               #plot points without outer border without alpha
               stroke = 0,
               shape=16)+
    theme_bw()+
    scale_fill_continuous(type = "viridis")+
    ggtitle(sample)+theme_bw()
}

ggarrange(plotlist = umap_sampletype_mock_point_plotlist)
```

```{r}
#| fig-width: 18
#| fig-height: 18
samples <- obj.v5$day_mock_sample_type_mockTissueIncluded |> unique()
umap_sampletype_mock_dens_plotlist <- list()
for (sample in samples) {
  obj.v5_filtered_for_sample <- obj.v5 |> as_tibble( ) |> filter(day_mock_sample_type_mockTissueIncluded==sample)
  umap_sampletype_mock_dens_plotlist[[sample]] <- obj.v5 |> 
    ggplot(aes(umapharmony8dims_1,umapharmony8dims_2) ) +
    geom_point()+
    stat_density_2d(data= obj.v5_filtered_for_sample, 
                    aes(x= umapharmony8dims_1,
                        y=umapharmony8dims_2,
                        fill = after_stat(level)), geom = "polygon",contour_var = "ndensity"
                    )+
    theme_bw()+
    scale_fill_continuous(type = "viridis")+
    ggtitle(sample)+theme_bw()
}

#densities have to be adjusted, overlap
#https://stackoverflow.com/questions/76533721/plot-only-top-layers-of-ggplot-stat-density-2d-geom-density-2d-in-r

ggarrange(plotlist =umap_sampletype_mock_dens_plotlist)
```

### Show the embeddings of Ms4a3 neg and Ms4a

```{r}

samples <- obj.v5$sampletag_Ms4a3 |> unique()
umap_sampletag_Ms4a3_point_plotlist <- list()
for (sample in samples) {
  obj.v5_filtered_for_sample <- obj.v5 |> as_tibble( ) |> filter(sampletag_Ms4a3==sample)
  obj.v5_not_sample <- obj.v5 |> as_tibble( ) |> filter(sampletag_Ms4a3!=sample)
  
  umap_sampletag_Ms4a3_point_plotlist[[sample]] <- obj.v5 |> 
    ggplot() +
    geom_point(data= obj.v5_not_sample,aes(umapharmony8dims_1,umapharmony8dims_2),color="grey")+
    geom_point(data= obj.v5_filtered_for_sample,aes(umapharmony8dims_1,umapharmony8dims_2),
               color="red",
               alpha=0.4,
               #plot points without outer border without alpha
               stroke = 0,
               shape=16)+
    theme_bw()+
    scale_fill_continuous(type = "viridis")+
    ggtitle(sample)+theme_bw()
}

ggarrange(plotlist = umap_sampletag_Ms4a3_point_plotlist)
```

```{r}

samples <- obj.v5$sampletag_Ms4a3 |> unique()
umap_sampletag_Ms4a3_dens_plotlist <- list()
for (sample in samples) {
  obj.v5_filtered_for_sample <- obj.v5 |> as_tibble( ) |> filter(sampletag_Ms4a3==sample)
  umap_sampletag_Ms4a3_dens_plotlist[[sample]] <- obj.v5 |> 
    ggplot(aes(umapharmony8dims_1,umapharmony8dims_2) ) +
    geom_point()+
    stat_density_2d(data= obj.v5_filtered_for_sample, 
                    aes(x= umapharmony8dims_1,
                        y=umapharmony8dims_2,
                        fill = after_stat(level)), geom = "polygon",contour_var = "ndensity"
                    )+
    theme_bw()+
    scale_fill_continuous(type = "viridis")+
    ggtitle(sample)+theme_bw()
}

#densities have to be adjusted, overlap
#https://stackoverflow.com/questions/76533721/plot-only-top-layers-of-ggplot-stat-density-2d-geom-density-2d-in-r

ggarrange(plotlist =umap_sampletag_Ms4a3_dens_plotlist)
```

### Show embeddings of the different viral conditions as well as the mock

```{r}
#| fig-width: 18
#| fig-height: 18
samples <- obj.v5$condition |> unique()
umap_condition_plotlist <- list()
for (sample in samples) {
  obj.v5_filtered_for_sample <- obj.v5 |> as_tibble( ) |> filter(condition==sample)
  obj.v5_not_sample <- obj.v5 |> as_tibble( ) |> filter(condition!=sample)
  
  umap_condition_plotlist[[sample]] <- obj.v5 |> 
    ggplot() +
    geom_point(data= obj.v5_not_sample,aes(umapharmony8dims_1,umapharmony8dims_2),color="grey")+
    geom_point(data= obj.v5_filtered_for_sample,aes(umapharmony8dims_1,umapharmony8dims_2),
               color="red",
               alpha=0.4,
               #plot points without outer border without alpha
               stroke = 0,
               shape=16)+
    theme_bw()+
    scale_fill_continuous(type = "viridis")+
    ggtitle(sample)+theme_bw()
}

ggarrange(plotlist = umap_condition_plotlist)
```

### Show individual embeddings of the samples, **individual samples (virus per time point)**

```{r}
#| fig-width: 18
#| fig-height: 18
samples <- obj.v5$sampletag_name |> unique()
umap_sampletag_name_plotlist <- list()
for (sample in samples) {
  obj.v5_filtered_for_sample <- obj.v5 |> as_tibble( ) |> filter(sampletag_name==sample)
  obj.v5_not_sample <- obj.v5 |> as_tibble( ) |> filter(sampletag_name!=sample)
  
  umap_sampletag_name_plotlist[[sample]] <- obj.v5 |> 
    ggplot() +
    geom_point(data= obj.v5_not_sample,
               aes(umapharmony8dims_1,umapharmony8dims_2),
               color="grey")+
    geom_point(data= obj.v5_filtered_for_sample,
               aes(umapharmony8dims_1,umapharmony8dims_2),
               color="red",
               alpha=0.4,
               #plot points without outer border without alpha
               stroke = 0,
               shape=16)+
    theme_bw()+
    scale_fill_continuous(type = "viridis")+
    ggtitle(sample)+theme_bw()
}

ggarrange(plotlist = umap_sampletag_name_plotlist)
```

```{r}

```

## 3) Heatmaps RNA-seq Abseq for markers

### Heatmaps Abseq for SiglecF and Cd11c

```{r}
obj.v5 |>
  join_features(c("Siglecf-AbSeq", "Cd11c"),assay="adt", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_adt)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +ggtitle("mean dsb-normalized protein counts, z-score of cluster averages per marker")
```

### Heatmaps RNA for alveolar markers

```{r}
obj.v5 |>
  join_features(c("Pparg", "Chil3", "Fabp5", "Flt1", "Fabp4", "Siglecf", "Car4", "Ear1", "Krt79", "Itgax", "SiglecF"),assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +ggtitle("mean dsb-normalized protein counts, z-score of cluster averages per marker")
```

### Heatmaps RNA for alveolar markers no fabp5

**Fabp5 is highly and selectively expressed in macrophages among immune cells and is the Fabp family member most highly expressed in macrophages. Fabp5 deficiency significantly increases M2 polarization. Lyzs-Fabp5KO AAI mice exhibited increased infiltration of eosinophils in the lungs, more anti-OVA IgE in the sera, increased lung fibrosis, increased expressions of M2 marker molecules, and airway hyper-responsiveness to inhaled methacholine. Therefore, myeloid-specific deletion of Fabp5 aggravates allergic asthma, likely by regulating macrophage M2 polarization, although our present results do not exclude the potential involvement of neutrophils and DCs in this process.**

In summary, Fabp5 deficiency in myeloid cells exacerbates OVA-induced AAI in mice and increases macrophage M2 polarization. Interestingly, FABP5 selectively regulates the accumulation of long-chain unsaturated FAs, such as oleic acid, in macrophages. Unexpectedly, excessive uptake of oleic acid leads to increased M2 polarization in BALF and significantly aggravates AAI pathogenesis, suggesting that high dietary levels of oleic acid may exacerbate allergic asthma. Furthermore, Fabp5 deficiency activates PPARg, causing a series of metabolic reactions that include FA b oxidation, the TCA cycle, and oxidative phosphorylation, producing more ATP, and enhancing STAT6 activation to promote M2 polarization and M2-related allergic asthma.

```{r}
obj.v5 |>
  join_features(c("Pparg", "Chil3", "Flt1", "Fabp4", "Siglecf", "Car4", "Ear1", "Krt79", "Itgax", "SiglecF"),assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +ggtitle("mean dsb-normalized protein counts, z-score of cluster averages per marker")
```

```{r}

obj.v5 |>
  join_features(c("Pparg", "Chil3", "Flt1", "Fabp4", "Siglecf", "Car4", "Ear1", "Krt79", "Itgax", "SiglecF"),assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +ggtitle("mean dsb-normalized protein counts, z-score of cluster averages per marker")
```

## 4) Compositional Analysis

### 4A) cluster frequencies per group

```{r}
p1 <- obj.v5 |>  as_tibble()  |> filter(sample_tag_ms4a3_pos_gabbr2!= "Gabbr2_pos_Ms4a3_neg") |>  make_zscore_and_freq_data() |>
  mutate(individual_sample=paste(day_mock,
                                 sample_type,
                                 condition,
                                 sample_tag_ms4a3_pos_gabbr2,
                                 sep = "_")) |> 
  ggplot(aes(individual_sample,freq_cluster,color=condition)) + geom_point()+   facet_wrap(~harmony_cluster_8dims_rough, scales = "free", nrow=1) +theme(axis.text.x = element_blank(), axis.title = element_blank())
p1

p2 <- obj.v5 |>  as_tibble()  |> filter(sample_tag_ms4a3_pos_gabbr2!= "Gabbr2_pos_Ms4a3_neg") |>  make_zscore_and_freq_data() |>
  mutate(individual_sample=paste(day_mock,sample_type, condition,sample_tag_ms4a3_pos_gabbr2, sep = "_")) |> 
  ggplot(aes(individual_sample,freq_cluster,color=day_mock)) + geom_point()+  facet_wrap(~harmony_cluster_8dims_rough, scales = "free", nrow=1)+ theme(axis.text.x = element_blank(), axis.title = element_blank())

p3 <- obj.v5 |>  as_tibble()  |> filter(sample_tag_ms4a3_pos_gabbr2!= "Gabbr2_pos_Ms4a3_neg") |>  make_zscore_and_freq_data() |>
  mutate(individual_sample=paste(day_mock,sample_type, condition,sample_tag_ms4a3_pos_gabbr2, sep = "_")) |> 
  ggplot(aes(individual_sample,freq_cluster,color=sample_type)) + geom_point()+
 facet_wrap(~harmony_cluster_8dims_rough, scales = "free", nrow=1) +theme(axis.text.x = element_blank(), axis.title = element_blank())

p4 <- obj.v5 |>  as_tibble()  |> filter(sample_tag_ms4a3_pos_gabbr2!= "Gabbr2_pos_Ms4a3_neg") |>  make_zscore_and_freq_data() |>
  mutate(individual_sample=paste(day_mock,sample_type, condition,sample_tag_ms4a3_pos_gabbr2, sep = "_")) |> 
  ggplot(aes(individual_sample,freq_cluster,color=sample_tag_ms4a3_pos_gabbr2)) + geom_point()+scale_color_brewer()+ facet_wrap(~harmony_cluster_8dims_rough, scales = "free", nrow=1, strip.position="bottom") + #x_axis_text_90+
   theme_classic()+
  theme(axis.text.x = element_blank(), axis.title = element_blank())

(p1 + theme(strip.text.x = element_blank()))/
  (p2+theme(strip.text.x = element_blank()))/
  (p3+theme(strip.text.x = element_blank()))/
  p4 +
  plot_layout(guides = 'collect')
ggsave(filename = "cluster frequencies per group.png", height = 50, width = 50, units = "cm")

```

### 4b) **Z-scores of cluster frequencies: heatmap**

fix bug in it by specifying group by and count were used from the dplyr package it was not assumed

```{r}
obj.v5 |> 
  as_tibble() |>  # Convert obj.v5 to a tibble
  separate(orig.ident, sep = "__", into = c("day", "sample_type"), remove = FALSE) |> 
  mutate(day=str_replace_all(day,c("viral.experiment.1"="d60",
                                   "viral.experiment.2"="d8") )) |> 
  mutate(day=ifelse(condition=="Mock",condition,day)) |> 
  mutate(day=factor(day, levels=c("Mock", "d8","d60")),
         sample_type=as_factor(sample_type),
         condition=as_factor(condition),
         sampletag_Ms4a3=as_factor(sampletag_Ms4a3),
         harmony_cluster_8dims_rough=as_factor(harmony_cluster_8dims_rough)
         ) |> 
  dplyr::group_by(day,sample_type, condition,sampletag_Ms4a3,harmony_cluster_8dims_rough) |> 
  dplyr::count(day,sample_type, condition,sampletag_Ms4a3,harmony_cluster_8dims_rough, .drop = FALSE) |> 
  mutate(sample=paste(day,sample_type,condition,sampletag_Ms4a3)) |> 
  group_by(sample) |> 
  filter(!(day=="Mock"&(condition %in%c("PR8","MuHV4", "PVM", "MAV1")))) |> 
  mutate(freq_cluster=n/sum(n)) |> 
  mutate(condition=as.character(condition)) |> 
  na.omit() |>  # This is where the error occurs, likely because the object isn't a data frame or tibble
  group_by(harmony_cluster_8dims_rough) |> 
  mutate(cluster_mean_freq=mean(freq_cluster)) |> 
  mutate(cluster_mean_freq_zscore=(freq_cluster-cluster_mean_freq)/sd(freq_cluster)) |> 
  ggplot(aes(condition,harmony_cluster_8dims_rough, fill=cluster_mean_freq_zscore)) +
  geom_tile()+ 
  ggh4x::facet_nested_wrap(
    vars(sampletag_Ms4a3,sample_type ,day), nrow = 1,drop = TRUE,scales = "free_x"
  )+theme_bw()+ theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))   + scale_fill_gradient2(  low = "blue",
  mid = "white",
  high = "red")+ggtitle("proportions of cells from a given sample distributed across clusters ",
                        "Ms4a3 classification as sorted")


```

## 5) Reclustering of alveolar macrophages at d60 (clusters 0 1 5 6 7)

seurat_d60_alveolar_1 contains no mock

```{r}
seurat_d60 = obj.v5 %>% filter(str_detect(day_factor, "d60"))
seurat_d60_1 = seurat_d60  %>% filter(!str_detect(day_mock_sample_type, "Mock"))
seurat_d60_1_alveolar =  subset(seurat_d60_1, idents = c(0,1,5,6,7))
seurat_d60_1_alveolar = seurat_d60_1_alveolar %>%  filter(!str_detect(day_sample_type_cond_ms4a3_pos_gabbr2, "Gabbr2_pos_Ms4a3_neg"))
DimPlot(seurat_d60_1_alveolar, label = T)
```

### reclustering of alveolar clusters at d60, UMAP stored as umap.harmony_8dims_reclusterumap.harmony_8dims_recluster

```{r, echo=FALSE}
seurat_d60_1_alveolar <- FindNeighbors(seurat_d60_1_alveolar, reduction = "integrated.harmony", dims = 1:8 )
seurat_d60_1_alveolar <- FindClusters(seurat_d60_1_alveolar, cluster.name = "harmony_cluster_8dims_rough", resolution = 0.25)
seurat_d60_1_alveolar <- RunUMAP(seurat_d60_1_alveolar, reduction = "integrated.harmony", dims = 1:8, reduction.name = "umap.harmony_8dims_recluster")
seurat_d60_1_alveolar|> DimPlot(group.by = "harmony_cluster_8dims_rough", label=T)
```

```{r}
FeaturePlot(seurat_d60_1_alveolar, label = T, features = "Siglecf")
```

```{r}
umap_am_alveolar_d60 <- list()
genes_AM <- c("Chil3", "Fabp5", "Flt1", "Pparg", "Fabp4", "Siglecf", "Car4", "Ear1", "Krt79")

markers_am = unique(genes_AM)
for (i in markers_am) {
  plot <- FeaturePlot(seurat_d60_1_alveolar,  features = i, label = TRUE, label.size = 5)
  umap_am_alveolar_d60[[i]] <- plot
}

# Arrange plots using ggarrange
ggarrange(plotlist = umap_am_alveolar_d60)
ggsave("featureplot_AM_alveolar.png", width = 30, height = 50, units = "cm", path =  "../../Documents/machiels_lab_viral/28-03_Lucia_presentation_files/featureplots")
```

## 5) DE d60 of the reclustered genes

```{r}
markers_d60_alveolar <- FindAllMarkers(seurat_d60_1_alveolar,
                          assay = "RNA", 
                          logfc.threshold = 0.5,
                          test.use = "wilcox", 
                          min.pct = 0.2)
```

```{r}
markers_d60_alveolar_filtered = markers_d60_alveolar[markers_d60_alveolar$avg_log2FC > 1,]
nonsignficant_p_adj_d60_alveolar <- which(markers_d60_alveolar_filtered$p_val_adj <= 0.05)
markers_d60_alveolar_filtered <- markers_d60_alveolar_filtered[nonsignficant_p_adj_d60_alveolar, ]
write_xlsx(markers_d60_alveolar_filtered, "../../Documents/machiels_lab_viral/output/markers_d60_alveolar.xlsx")

```

```{r}
#select top 5 genes from each cluster

markers_d60_alveolar_filtered = data.frame(markers_d60_alveolar_filtered)
select_top_genes <- function(df, n = 5) {
  top_genes <- by(df, df$cluster, function(cluster_df) {
    cluster_df[order(cluster_df$avg_log2FC, decreasing = TRUE), ][1:n, ]
  })
  do.call(rbind, top_genes)
}

top_d60_alveolar <- select_top_genes(markers_d60_alveolar_filtered, n = 5)
write_xlsx(top_d60_alveolar, "../../Documents/machiels_lab_viral/output/top_markers_d60_alveolar.xlsx")
```

```{r}
genes_d60_alveolar = top_d60_alveolar$gene

seurat_d60_1_alveolar |>
  join_features(genes_d60_alveolar,assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +ggtitle("mean dsb-normalized protein counts, z-score of cluster averages per marker")
```

## 6) top 20 most DE genes in all clusters

```{r}
markers_all <- FindAllMarkers(obj.v5,
                          assay = "RNA", 
                          logfc.threshold = 0.5,
                          test.use = "wilcox", 
                          min.pct = 0.2)

```

```{r}
markers_all_filtered = markers_all[markers_all$avg_log2FC > 1,]
nonsignficant_p_adj_all <- which(markers_all_filtered$p_val_adj <= 0.05)
markers_all_filtered <- markers_all_filtered[nonsignficant_p_adj_all, ]
write_xlsx(markers_all_filtered, "../../Documents/machiels_lab_viral/output/markers_all_filtered.xlsx")
```

```{r}
markers_filtered_all = readxl::read_xlsx("../../Documents/machiels_lab_viral/output/markers_all_filtered.xlsx") 
top_20_all <- select_top_genes(markers_filtered_all, n = 20)
write_xlsx(top_20_all, "../../Documents/machiels_lab_viral/output/top_20_all_correct.xlsx")
```

## 7) Heatmap markers daniel 'clusters_gene_set.xlsx' for full object

```{r}
library(purrr)

Clusters_gene_sets <- read_excel("Clusters gene sets.xlsx")


# Extract the "Cell type" column from Clusters_gene_sets
cell_types <- Clusters_gene_sets$`Cell type`

# Add "Cell type" as metadata to Seurat object
obj.v5 <- AddMetaData(object =  obj.v5, metadata = list(Cell_Type = factor(cell_types)))

gene_sets <- unique(Clusters_gene_sets$`Gene sets`)

# Create a factor variable based on unique gene sets
factor_gene_sets <- factor(Clusters_gene_sets$`Gene sets`, levels = gene_sets)
obj.v5 <- AddMetaData(object = obj.v5, metadata = list(Gene_Sets = factor_gene_sets))

unique_gene_sets <- unique(Clusters_gene_sets$`Gene sets`)

plot_heatmap_all = obj.v5 |>
  join_features(unique_gene_sets,assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) 
ggsave("heatmap_daniel_genes_all.png", width = 20, height = 10, units = "cm", path =  "../../Documents/machiels_lab_viral/28-03_Lucia_presentation_files/")
```

```{r}
genes_AM <- c("Chil3", "Fabp5", "Flt1", "Pparg", "Fabp4", "Siglecf", "Car4", "Ear1", "Krt79")

plot_heatmap_am = obj.v5 |>
  join_features(genes_AM,assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) 
ggsave("heatmap_daniel_genes_am_geenomit.png", width = 20, height = 10, units = "cm", path =  "../../Documents/machiels_lab_viral/28-03_Lucia_presentation_files/")


```

```{r}
genes_im <- c("C1qa", "C1qb", "C1qc", "Pf4", "C5ar1", "Apoe", "Cd14", "Csf1r", "Mafb", "Mrc1", "Folr2", "Lyve1", "Timd4", "H2-Ab1", "Cx3cr1", "CD163")
plot_heatmap_im = obj.v5 |>
  join_features(genes_im,assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) 
ggsave("heatmap_daniel_genes_im.png", width = 20, height = 10, units = "cm", path =  "../../Documents/machiels_lab_viral/28-03_Lucia_presentation_files/")

```

```{r}
genes_recmacs <- c("Ly6c2", "Ccr2", "Cd14", "Fn1", "Vcan", "IL1b", "S100a6", "S100a4", "Apoe", "Mafb", "C5ar1", "Ms4a4c")
plot_heatmap_recmacs = obj.v5 |>
  join_features(genes_recmacs,assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) 
ggsave("heatmap_daniel_genes_recmacs.png", width = 20, height = 10, units = "cm", path =  "../../Documents/machiels_lab_viral/28-03_Lucia_presentation_files/")
```

```{r}
genes_cDC1 <- c("Cd24a", "Itgae", "Xcr1", "Batf3", "Cadm1", "Dpp4", "Zbtb46", "Id2", "Flt3", "Irf8", "Tlr3", "Clec9a", "Cst3", "Wdfy4", "Cxcr3", "Rnase6", "Ccr7", "Ccl5")
plot_heatmap_cdc1 = obj.v5 |>
  join_features(genes_cDC1,assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) 
ggsave("heatmap_daniel_genes_cdc1.png", width = 20, height = 10, units = "cm", path =  "../../Documents/machiels_lab_viral/28-03_Lucia_presentation_files/")

```

```{r}
genes_cdc2 <- c("Dpp4", "Zbtb46", "Clec10a", "Ccl17", "Ccl22", "Fabp5", "S100a6", "S100a4", "Flt3", "Irf4", "H2-Ab1", "CD209a", "Ccr7", "Ccl5")

plot_heatmap_cdc2 = obj.v5 |>
  join_features(genes_cdc2,assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) 
ggsave("heatmap_daniel_genes_cdc2.png", width = 20, height = 10, units = "cm", path =  "../../Documents/machiels_lab_viral/28-03_Lucia_presentation_files/")
```

```{r}
genes_cdc2_infected <- c("Ifit1", "Ifit1bl1", "Ifit2", "Ifit", "Ifit3b", "Ifi205", "Ifi206", "Rsad2", "Phf1 1d", "Mx1", "Cmpk2", "Helz2")

plot_heatmap_cdc2_infected = obj.v5 |>
  join_features(genes_cdc2_infected,assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) 
ggsave("heatmap_daniel_genes_cdc2_infected.png", width = 20, height = 10, units = "cm", path =  "../../Documents/machiels_lab_viral/28-03_Lucia_presentation_files/")
```

```{r}
genes_pdc <- c("Siglech", "Ly6d", "Ccr9", "Cox6a2", "Plac8", "Ly6c2", "Tcf4", "Bst2")
plot_heatmap_pdc = obj.v5 |>
  join_features(genes_pdc,assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) 
ggsave("heatmap_daniel_genes_pdc.png", width = 20, height = 10, units = "cm", path =  "../../Documents/machiels_lab_viral/28-03_Lucia_presentation_files/")
```

```{r}
genes_activated_im <- c("Ly6c2", "Ccr2", "Cd14", "Fn1", "Vcan", "IL1b", "S100a6", "S100a4", "Apoe", "Mafb", "C5ar1", "Ms4a4c", "Lp1", "Mpeg1", "Clec4n", "Calr", "Siglec1")
plot_heatmap_activatedIM = obj.v5 |>
  join_features(genes_activated_im,assay="RNA", slot="scale.data")  |> 
group_by(.feature,harmony_cluster_8dims_rough) |>
  summarise(mean_scaled_dsb=mean(.abundance_RNA)) |>
  group_by(.feature) |> 
  mutate(zscore_mean_scaled_dsb=(mean_scaled_dsb-mean(mean_scaled_dsb))/sd(mean_scaled_dsb))|> na.omit() |> 
  mutate(zscore_mean_scaled_dsb=ifelse(zscore_mean_scaled_dsb>2,2,
                                       ifelse(zscore_mean_scaled_dsb<(-2),-2,zscore_mean_scaled_dsb))) |> 
  ggplot(aes(.feature,harmony_cluster_8dims_rough, fill=zscore_mean_scaled_dsb)) +
  geom_tile()+ scale_fill_viridis() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) 
ggsave("heatmap_daniel_genes_activatedIM.png", width = 20, height = 10, units = "cm", path =  "../../Documents/machiels_lab_viral/28-03_Lucia_presentation_files/")
```
